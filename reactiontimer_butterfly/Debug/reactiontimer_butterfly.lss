
reactiontimer_butterfly.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002d  00800100  00800100  00000616  2**0
                  ALLOC
  2 .stab         000009c0  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001b3  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00001190  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000837  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000254  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c1  00000000  00000000  00001cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026e  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000406  00000000  00000000  0000252a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_3>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_7>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_22>

0000005c <LCD_SegTable>:
  5c:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
  7c:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
  8c:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
  9c:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
  ac:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
  bc:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e2 ea       	ldi	r30, 0xA2	; 162
  dc:	f5 e0       	ldi	r31, 0x05	; 5
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a0 30       	cpi	r26, 0x00	; 0
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	11 e0       	ldi	r17, 0x01	; 1
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	ad 32       	cpi	r26, 0x2D	; 45
  f6:	b1 07       	cpc	r27, r17
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 a5 01 	call	0x34a	; 0x34a <main>
  fe:	0c 94 cf 02 	jmp	0x59e	; 0x59e <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <LCD_WriteChar>:
 ARGUMENTS: | Character to display, LCD character number to display character on
 RETURNS:   | None
*/
inline void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
   uint8_t* BuffPtr = (uint8_t*)(LCD_LCDREGS_START + (Digit >> 1));
 106:	a6 2f       	mov	r26, r22
 108:	a6 95       	lsr	r26
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	a4 51       	subi	r26, 0x14	; 20
 10e:	bf 4f       	sbci	r27, 0xFF	; 255
   uint16_t SegData = 0x0000;

   if (Byte != LCD_SPACE_OR_INVALID_CHAR)              // Null indicates invalid character or space
 110:	8f 3f       	cpi	r24, 0xFF	; 255
 112:	59 f0       	breq	.+22     	; 0x12a <LCD_WriteChar+0x24>
     SegData = pgm_read_word(&LCD_SegTable[Byte]);
 114:	e8 2f       	mov	r30, r24
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	e4 5a       	subi	r30, 0xA4	; 164
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	25 91       	lpm	r18, Z+
 122:	34 91       	lpm	r19, Z
 124:	82 2f       	mov	r24, r18
 126:	93 2f       	mov	r25, r19
 128:	02 c0       	rjmp	.+4      	; 0x12e <LCD_WriteChar+0x28>
 RETURNS:   | None
*/
inline void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
   uint8_t* BuffPtr = (uint8_t*)(LCD_LCDREGS_START + (Digit >> 1));
   uint16_t SegData = 0x0000;
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 NAME:      | LCD_WriteChar (static, inline)
 PURPOSE:   | Routine to write a character to the correct LCD registers for display
 ARGUMENTS: | Character to display, LCD character number to display character on
 RETURNS:   | None
*/
inline void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
 12e:	9d 01       	movw	r18, r26
 130:	2c 5e       	subi	r18, 0xEC	; 236
 132:	3f 4f       	sbci	r19, 0xFF	; 255

   for (uint8_t BNib = 0; BNib < 4; BNib++)
   {
      uint8_t MaskedSegData = (SegData & 0x0000F);

      if (Digit & 0x01)
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	61 70       	andi	r22, 0x01	; 1
 138:	70 70       	andi	r23, 0x00	; 0
   if (Byte != LCD_SPACE_OR_INVALID_CHAR)              // Null indicates invalid character or space
     SegData = pgm_read_word(&LCD_SegTable[Byte]);

   for (uint8_t BNib = 0; BNib < 4; BNib++)
   {
      uint8_t MaskedSegData = (SegData & 0x0000F);
 13a:	48 2f       	mov	r20, r24
 13c:	4f 70       	andi	r20, 0x0F	; 15

      if (Digit & 0x01)
 13e:	61 15       	cp	r22, r1
 140:	71 05       	cpc	r23, r1
 142:	39 f0       	breq	.+14     	; 0x152 <LCD_WriteChar+0x4c>
        *BuffPtr = ((*BuffPtr & 0x0F) | (MaskedSegData << 4));
 144:	42 95       	swap	r20
 146:	40 7f       	andi	r20, 0xF0	; 240
 148:	5c 91       	ld	r21, X
 14a:	5f 70       	andi	r21, 0x0F	; 15
 14c:	45 2b       	or	r20, r21
 14e:	4c 93       	st	X, r20
 150:	04 c0       	rjmp	.+8      	; 0x15a <LCD_WriteChar+0x54>
      else
        *BuffPtr = ((*BuffPtr & 0xF0) | MaskedSegData);
 152:	5c 91       	ld	r21, X
 154:	50 7f       	andi	r21, 0xF0	; 240
 156:	45 2b       	or	r20, r21
 158:	4c 93       	st	X, r20

      BuffPtr += 5;
 15a:	15 96       	adiw	r26, 0x05	; 5
      SegData >>= 4;
 15c:	92 95       	swap	r25
 15e:	82 95       	swap	r24
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	89 27       	eor	r24, r25
 164:	9f 70       	andi	r25, 0x0F	; 15
 166:	89 27       	eor	r24, r25
   uint16_t SegData = 0x0000;

   if (Byte != LCD_SPACE_OR_INVALID_CHAR)              // Null indicates invalid character or space
     SegData = pgm_read_word(&LCD_SegTable[Byte]);

   for (uint8_t BNib = 0; BNib < 4; BNib++)
 168:	a2 17       	cp	r26, r18
 16a:	b3 07       	cpc	r27, r19
 16c:	31 f7       	brne	.-52     	; 0x13a <LCD_WriteChar+0x34>
        *BuffPtr = ((*BuffPtr & 0xF0) | MaskedSegData);

      BuffPtr += 5;
      SegData >>= 4;
   }
}
 16e:	08 95       	ret

00000170 <LCD_Init>:
 RETURNS:   | None
*/
void LCD_Init(void)
{
   // Set the initial contrast level to maximum:
   LCD_CONTRAST_LEVEL(0x0F);
 170:	8f e0       	ldi	r24, 0x0F	; 15
 172:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins:
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 176:	87 eb       	ldi	r24, 0xB7	; 183
 178:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 64Hz:
    LCDFRR  = (0<<LCDPS0) | (3<<LCDCD0);
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	80 93 e6 00 	sts	0x00E6, r24

   // Enable LCD and set low power waveform, enable start of frame interrupt:
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE);
 182:	88 ec       	ldi	r24, 0xC8	; 200
 184:	80 93 e4 00 	sts	0x00E4, r24
}
 188:	08 95       	ret

0000018a <LCD_puts>:
 PURPOSE:   | Displays a string from SRAM onto the Butterfly's LCD
 ARGUMENTS: | Pointer to the start of the SRAM string
 RETURNS:   | None
*/
void LCD_puts(const char *Data)
{
 18a:	fc 01       	movw	r30, r24
   uint8_t LoadB       = 0;
 18c:	20 e0       	ldi	r18, 0x00	; 0
            TextBuffer[LoadB++] = (CurrByte - '*');
            break;
         case 0x00:                                   // Null termination of the string - ignore for now so the nulls can be appended below
            break;
         default:                                     // Space or invalid character, use 0xFF to display a blank
            TextBuffer[LoadB++] = LCD_SPACE_OR_INVALID_CHAR;
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	5f ef       	ldi	r21, 0xFF	; 255
   uint8_t LoadB       = 0;
   uint8_t CurrByte;

   do
   {
      CurrByte = *(Data++);
 194:	31 91       	ld	r19, Z+

      switch (CurrByte)
 196:	3b 37       	cpi	r19, 0x7B	; 123
 198:	90 f4       	brcc	.+36     	; 0x1be <LCD_puts+0x34>
 19a:	31 36       	cpi	r19, 0x61	; 97
 19c:	38 f4       	brcc	.+14     	; 0x1ac <LCD_puts+0x22>
 19e:	33 23       	and	r19, r19
 1a0:	99 f0       	breq	.+38     	; 0x1c8 <LCD_puts+0x3e>
 1a2:	43 2f       	mov	r20, r19
 1a4:	4a 52       	subi	r20, 0x2A	; 42
 1a6:	46 33       	cpi	r20, 0x36	; 54
 1a8:	50 f4       	brcc	.+20     	; 0x1be <LCD_puts+0x34>
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <LCD_puts+0x24>
      {
         case 'a'...'z':
            CurrByte &= ~(1 << 5);                   // Translate to upper-case character
 1ac:	3f 7d       	andi	r19, 0xDF	; 223
         case '*'...'_':                                // Valid character, load it into the array
            TextBuffer[LoadB++] = (CurrByte - '*');
 1ae:	43 2f       	mov	r20, r19
 1b0:	4a 52       	subi	r20, 0x2A	; 42
 1b2:	dc 01       	movw	r26, r24
 1b4:	a2 0f       	add	r26, r18
 1b6:	b1 1d       	adc	r27, r1
 1b8:	4c 93       	st	X, r20
 1ba:	2f 5f       	subi	r18, 0xFF	; 255
            break;
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <LCD_puts+0x3e>
         case 0x00:                                   // Null termination of the string - ignore for now so the nulls can be appended below
            break;
         default:                                     // Space or invalid character, use 0xFF to display a blank
            TextBuffer[LoadB++] = LCD_SPACE_OR_INVALID_CHAR;
 1be:	dc 01       	movw	r26, r24
 1c0:	a2 0f       	add	r26, r18
 1c2:	b1 1d       	adc	r27, r1
 1c4:	5c 93       	st	X, r21
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
      }
   }
   while (CurrByte && (LoadB < LCD_TEXTBUFFER_SIZE));
 1c8:	33 23       	and	r19, r19
 1ca:	21 f0       	breq	.+8      	; 0x1d4 <LCD_puts+0x4a>
 1cc:	24 31       	cpi	r18, 0x14	; 20
 1ce:	10 f3       	brcs	.-60     	; 0x194 <LCD_puts+0xa>
 1d0:	32 2f       	mov	r19, r18
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <LCD_puts+0x4c>
 1d4:	32 2f       	mov	r19, r18

   ScrollFlags = ((LoadB > LCD_DISPLAY_SIZE)? LCD_FLAG_SCROLL : 0x00);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	37 30       	cpi	r19, 0x07	; 7
 1da:	08 f4       	brcc	.+2      	; 0x1de <LCD_puts+0x54>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	80 93 04 01 	sts	0x0104, r24
 NAME:      | LCD_puts
 PURPOSE:   | Displays a string from SRAM onto the Butterfly's LCD
 ARGUMENTS: | Pointer to the start of the SRAM string
 RETURNS:   | None
*/
void LCD_puts(const char *Data)
 1e2:	39 5f       	subi	r19, 0xF9	; 249
   while (CurrByte && (LoadB < LCD_TEXTBUFFER_SIZE));

   ScrollFlags = ((LoadB > LCD_DISPLAY_SIZE)? LCD_FLAG_SCROLL : 0x00);

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
     TextBuffer[LoadB++] = LCD_SPACE_OR_INVALID_CHAR;  // Load in nulls to ensure that when scrolling, the display clears before wrapping
 1e4:	8a e0       	ldi	r24, 0x0A	; 10
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	4f ef       	ldi	r20, 0xFF	; 255
 1ea:	fc 01       	movw	r30, r24
 1ec:	e2 0f       	add	r30, r18
 1ee:	f1 1d       	adc	r31, r1
 1f0:	40 83       	st	Z, r20
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
   }
   while (CurrByte && (LoadB < LCD_TEXTBUFFER_SIZE));

   ScrollFlags = ((LoadB > LCD_DISPLAY_SIZE)? LCD_FLAG_SCROLL : 0x00);

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
 1f4:	23 17       	cp	r18, r19
 1f6:	c9 f7       	brne	.-14     	; 0x1ea <LCD_puts+0x60>
     TextBuffer[LoadB++] = LCD_SPACE_OR_INVALID_CHAR;  // Load in nulls to ensure that when scrolling, the display clears before wrapping

   TextBuffer[LoadB] = 0x00;                           // Null-terminate string
 1f8:	ea e0       	ldi	r30, 0x0A	; 10
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	e3 0f       	add	r30, r19
 1fe:	f1 1d       	adc	r31, r1
 200:	10 82       	st	Z, r1

   StrStart      = 0;
 202:	10 92 09 01 	sts	0x0109, r1
   StrEnd        = LoadB;
 206:	30 93 08 01 	sts	0x0108, r19
   ScrollCount   = LCD_SCROLLCOUNT_DEFAULT + LCD_DELAYCOUNT_DEFAULT;
 20a:	8a e1       	ldi	r24, 0x1A	; 26
 20c:	80 93 07 01 	sts	0x0107, r24
   UpdateDisplay = true;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 06 01 	sts	0x0106, r24
}
 216:	08 95       	ret

00000218 <LCD_puts_f>:
 PURPOSE:   | Displays a string from flash onto the Butterfly's LCD
 ARGUMENTS: | Pointer to the start of the flash string
 RETURNS:   | None
*/
void LCD_puts_f(const char *FlashData)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	bc 01       	movw	r22, r24
   /* Rather than create a new buffer here (wasting RAM), the TextBuffer global
      is re-used as a temp buffer. Once the ASCII data is loaded in to TextBuffer,
      LCD_puts is called with it to post-process it into the correct format for the
      LCD interrupt.                                                                */

   strcpy_P((char*)&TextBuffer[0], FlashData);
 21e:	ca e0       	ldi	r28, 0x0A	; 10
 220:	d1 e0       	ldi	r29, 0x01	; 1
 222:	ce 01       	movw	r24, r28
 224:	0e 94 83 02 	call	0x506	; 0x506 <strcpy_P>
   LCD_puts((char*)&TextBuffer[0]);
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_puts>
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <__vector_22>:
 PURPOSE:   | ISR to handle the display and scrolling of the current display string onto the LCD
 ARGUMENTS: | None
 RETURNS:   | None
*/
ISR(LCD_vect, ISR_NOBLOCK)
{
 234:	78 94       	sei
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
   if (ScrollFlags & LCD_FLAG_SCROLL)
 260:	80 91 04 01 	lds	r24, 0x0104
 264:	80 ff       	sbrs	r24, 0
 266:	0e c0       	rjmp	.+28     	; 0x284 <__vector_22+0x50>
   {
      if (!(ScrollCount--))
 268:	80 91 07 01 	lds	r24, 0x0107
 26c:	98 2f       	mov	r25, r24
 26e:	91 50       	subi	r25, 0x01	; 1
 270:	90 93 07 01 	sts	0x0107, r25
 274:	88 23       	and	r24, r24
 276:	31 f4       	brne	.+12     	; 0x284 <__vector_22+0x50>
      {
         UpdateDisplay = true;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 06 01 	sts	0x0106, r24
         ScrollCount   = LCD_SCROLLCOUNT_DEFAULT;
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	80 93 07 01 	sts	0x0107, r24
      }
   }

   if (UpdateDisplay)
 284:	80 91 06 01 	lds	r24, 0x0106
 288:	88 23       	and	r24, r24
 28a:	09 f4       	brne	.+2      	; 0x28e <__vector_22+0x5a>
 28c:	43 c0       	rjmp	.+134    	; 0x314 <__vector_22+0xe0>
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	d0 e0       	ldi	r29, 0x00	; 0
         uint8_t Byte = (StrStart + Character);

         if (Byte >= StrEnd)
           Byte -= StrEnd;

         LCD_WriteChar(TextBuffer[Byte], Character);
 292:	0a e0       	ldi	r16, 0x0A	; 10
 294:	11 e0       	ldi	r17, 0x01	; 1

   if (UpdateDisplay)
   {
      for (uint8_t Character = 0; Character < LCD_DISPLAY_SIZE; Character++)
      {
         uint8_t Byte = (StrStart + Character);
 296:	80 91 09 01 	lds	r24, 0x0109
 29a:	8c 0f       	add	r24, r28

         if (Byte >= StrEnd)
 29c:	90 91 08 01 	lds	r25, 0x0108
 2a0:	89 17       	cp	r24, r25
 2a2:	18 f0       	brcs	.+6      	; 0x2aa <__vector_22+0x76>
           Byte -= StrEnd;
 2a4:	90 91 08 01 	lds	r25, 0x0108
 2a8:	89 1b       	sub	r24, r25

         LCD_WriteChar(TextBuffer[Byte], Character);
 2aa:	f8 01       	movw	r30, r16
 2ac:	e8 0f       	add	r30, r24
 2ae:	f1 1d       	adc	r31, r1
 2b0:	80 81       	ld	r24, Z
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	be 01       	movw	r22, r28
 2b6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_WriteChar>
 2ba:	21 96       	adiw	r28, 0x01	; 1
      }
   }

   if (UpdateDisplay)
   {
      for (uint8_t Character = 0; Character < LCD_DISPLAY_SIZE; Character++)
 2bc:	c6 30       	cpi	r28, 0x06	; 6
 2be:	d1 05       	cpc	r29, r1
 2c0:	51 f7       	brne	.-44     	; 0x296 <__vector_22+0x62>
           Byte -= StrEnd;

         LCD_WriteChar(TextBuffer[Byte], Character);
      }

      if ((StrStart + LCD_DISPLAY_SIZE) == StrEnd)    // Done scrolling message on LCD once
 2c2:	20 91 09 01 	lds	r18, 0x0109
 2c6:	80 91 08 01 	lds	r24, 0x0108
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	2a 5f       	subi	r18, 0xFA	; 250
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	28 17       	cp	r18, r24
 2d4:	39 07       	cpc	r19, r25
 2d6:	29 f4       	brne	.+10     	; 0x2e2 <__vector_22+0xae>
        ScrollFlags |= LCD_FLAG_SCROLL_DONE;
 2d8:	80 91 04 01 	lds	r24, 0x0104
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	80 93 04 01 	sts	0x0104, r24

      if (StrStart++ == StrEnd)
 2e2:	80 91 09 01 	lds	r24, 0x0109
 2e6:	90 91 08 01 	lds	r25, 0x0108
 2ea:	28 2f       	mov	r18, r24
 2ec:	2f 5f       	subi	r18, 0xFF	; 255
 2ee:	20 93 09 01 	sts	0x0109, r18
 2f2:	89 17       	cp	r24, r25
 2f4:	19 f4       	brne	.+6      	; 0x2fc <__vector_22+0xc8>
        StrStart     = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 09 01 	sts	0x0109, r24

       if (ShowColons)
 2fc:	80 91 05 01 	lds	r24, 0x0105
 300:	88 23       	and	r24, r24
 302:	21 f0       	breq	.+8      	; 0x30c <__vector_22+0xd8>
            *((uint8_t*)(LCD_LCDREGS_START + 8)) = 0x01;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 f4 00 	sts	0x00F4, r24
 30a:	02 c0       	rjmp	.+4      	; 0x310 <__vector_22+0xdc>
   #if defined(INC_FROM_DRIVER)
     static inline void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit);
   #endif

#endif
            *((uint8_t*)(LCD_LCDREGS_START + 8)) = 0x00;
 30c:	10 92 f4 00 	sts	0x00F4, r1

      UpdateDisplay  = false;                         // Clear LCD management flags, LCD update is complete
 310:	10 92 06 01 	sts	0x0106, r1
   }
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <LCD_ShowColons>:
 ARGUMENTS: | Boolean - true to turn on colons
 RETURNS:   | None
*/
void LCD_ShowColons(const uint8_t ColonsOn)
{
   ShowColons    = ColonsOn;
 33e:	80 93 05 01 	sts	0x0105, r24
   UpdateDisplay = true;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 06 01 	sts	0x0106, r24
}
 348:	08 95       	ret

0000034a <main>:
void checkPORTB();

int main(void)
{	
	// no interrupts
	cli();
 34a:	f8 94       	cli
	
	LCD_Init();
 34c:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Init>
		
	// use PINB1 and PINB2 as input to check if pressed
	DDRB &= ~((1<< PINB1) | (1 << PINB2));
 350:	84 b1       	in	r24, 0x04	; 4
 352:	89 7f       	andi	r24, 0xF9	; 249
 354:	84 b9       	out	0x04, r24	; 4
	// use PINB5 as output (Piezo element on AVR Butterfly) to indicate game start
	DDRB |= (1<<PINB5);
 356:	25 9a       	sbi	0x04, 5	; 4
	
	//set up PINB0 to detect if game resets (restarts), all are high (5V) initially
	PORTB |= 0b11111111;
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	85 b9       	out	0x05, r24	; 5
	// enable external interrupts on PCINT8-PCINT15
	EIMSK |= (1<<PCIE1);
 35e:	ef 9a       	sbi	0x1d, 7	; 29
	EIFR |= (1<<PCIF1);
 360:	e7 9a       	sbi	0x1c, 7	; 28
	PCMSK1 |= (1<<PCINT9) | (1<<PCINT10); // individual interrupt enabler for PCINT9 (PINB1) and PCINT10 (PINB2)
 362:	ec e6       	ldi	r30, 0x6C	; 108
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	86 60       	ori	r24, 0x06	; 6
 36a:	80 83       	st	Z, r24
	sei();
 36c:	78 94       	sei
			
			game_start = 2;
		}
		else if ((game_start == 2)&&(game_buttonpressed==1)){
			cli();
			game_lastscore = TCNT1/(MAX_COUNT/5000);
 36e:	0f 2e       	mov	r0, r31
 370:	f4 e8       	ldi	r31, 0x84	; 132
 372:	cf 2e       	mov	r12, r31
 374:	dd 24       	eor	r13, r13
 376:	f0 2d       	mov	r31, r0
			game_buttonpressed = 0; // clear button press to prevent conflict
			//disable interrupts that are set when game_start = 1
			TIMSK1 &= ~(1<<OCIE1A);
 378:	0f e6       	ldi	r16, 0x6F	; 111
 37a:	10 e0       	ldi	r17, 0x00	; 0
			PCMSK1 &= ~(1<<PCINT10);	
 37c:	0f 2e       	mov	r0, r31
 37e:	fc e6       	ldi	r31, 0x6C	; 108
 380:	2f 2e       	mov	r2, r31
 382:	33 24       	eor	r3, r3
 384:	f0 2d       	mov	r31, r0
			// set up to give a buzz to indicate game has started
			PORTB |= (1<<PINB5); // on buzz, turn on light when game is active
			
			// enable timer interrupt
			TCNT1 = 0;
			OCR1A = (unsigned int) MAX_COUNT;
 386:	0f 2e       	mov	r0, r31
 388:	f8 e8       	ldi	r31, 0x88	; 136
 38a:	8f 2e       	mov	r8, r31
 38c:	99 24       	eor	r9, r9
 38e:	f0 2d       	mov	r31, r0
 390:	0f 2e       	mov	r0, r31
 392:	f5 e2       	ldi	r31, 0x25	; 37
 394:	6f 2e       	mov	r6, r31
 396:	f6 e2       	ldi	r31, 0x26	; 38
 398:	7f 2e       	mov	r7, r31
 39a:	f0 2d       	mov	r31, r0
			TCCR1A = 0;
 39c:	44 24       	eor	r4, r4
 39e:	55 24       	eor	r5, r5
 3a0:	68 94       	set
 3a2:	47 f8       	bld	r4, 7
			TCCR1B |= (1<<WGM12) | (1<<CS12) | (1<<CS10);	// set CTC mode, prescaler 1024 (Part 1 of 2)
 3a4:	0f 2e       	mov	r0, r31
 3a6:	f1 e8       	ldi	r31, 0x81	; 129
 3a8:	ef 2e       	mov	r14, r31
 3aa:	ff 24       	eor	r15, r15
 3ac:	f0 2d       	mov	r31, r0
			TCCR1B &= ~((1<<WGM13) | (1<<CS11));			// set CTC mode, prescaler 1024 (Part 2 of 2)
			TIMSK1 |= (1<<OCIE1A);
			
			game_start = 2;
 3ae:	bb 24       	eor	r11, r11
 3b0:	68 94       	set
 3b2:	b1 f8       	bld	r11, 1
			PORTB &= ~(1<<PINB5); // turn off LED when done
			sei();
		}
		
		
		itoa(PINB, score, 16);		
 3b4:	c5 e2       	ldi	r28, 0x25	; 37
 3b6:	d1 e0       	ldi	r29, 0x01	; 1
	sei();
	
    while(1)
    {
		
        if (game_start == 0)
 3b8:	80 91 03 01 	lds	r24, 0x0103
 3bc:	88 23       	and	r24, r24
 3be:	61 f4       	brne	.+24     	; 0x3d8 <main+0x8e>
		{
			game_buttonpressed = 0;
 3c0:	10 92 02 01 	sts	0x0102, r1
			game_lastscore = 0;
 3c4:	10 92 01 01 	sts	0x0101, r1
 3c8:	10 92 00 01 	sts	0x0100, r1
			PORTB &= ~(1<<PINB5); // turn off light when game inactive
 3cc:	2d 98       	cbi	0x05, 5	; 5
			
			// disable PINB1 and TNCT CTC interrupt
			TIMSK1 &= ~(1<<OCIE1A);
 3ce:	d8 01       	movw	r26, r16
 3d0:	8c 91       	ld	r24, X
 3d2:	8d 7f       	andi	r24, 0xFD	; 253
 3d4:	8c 93       	st	X, r24
 3d6:	43 c0       	rjmp	.+134    	; 0x45e <main+0x114>
		}			
			
		else if (game_start == 1)
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	39 f5       	brne	.+78     	; 0x42a <main+0xe0>
		{
			game_buttonpressed = 0;
 3dc:	10 92 02 01 	sts	0x0102, r1
			game_lastscore = 0;
 3e0:	10 92 01 01 	sts	0x0101, r1
 3e4:	10 92 00 01 	sts	0x0100, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	98 e0       	ldi	r25, 0x08	; 8
 3ec:	ad e3       	ldi	r26, 0x3D	; 61
 3ee:	81 50       	subi	r24, 0x01	; 1
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	a0 40       	sbci	r26, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <main+0xa4>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <main+0xae>
 3f8:	00 00       	nop
			
			// delay
			_delay_ms(10000);
			
			// set up to give a buzz to indicate game has started
			PORTB |= (1<<PINB5); // on buzz, turn on light when game is active
 3fa:	2d 9a       	sbi	0x05, 5	; 5
			
			// enable timer interrupt
			TCNT1 = 0;
 3fc:	d6 01       	movw	r26, r12
 3fe:	11 96       	adiw	r26, 0x01	; 1
 400:	1c 92       	st	X, r1
 402:	1e 92       	st	-X, r1
			OCR1A = (unsigned int) MAX_COUNT;
 404:	f4 01       	movw	r30, r8
 406:	71 82       	std	Z+1, r7	; 0x01
 408:	60 82       	st	Z, r6
			TCCR1A = 0;
 40a:	d2 01       	movw	r26, r4
 40c:	1c 92       	st	X, r1
			TCCR1B |= (1<<WGM12) | (1<<CS12) | (1<<CS10);	// set CTC mode, prescaler 1024 (Part 1 of 2)
 40e:	f7 01       	movw	r30, r14
 410:	80 81       	ld	r24, Z
 412:	8d 60       	ori	r24, 0x0D	; 13
 414:	80 83       	st	Z, r24
			TCCR1B &= ~((1<<WGM13) | (1<<CS11));			// set CTC mode, prescaler 1024 (Part 2 of 2)
 416:	80 81       	ld	r24, Z
 418:	8d 7e       	andi	r24, 0xED	; 237
 41a:	80 83       	st	Z, r24
			TIMSK1 |= (1<<OCIE1A);
 41c:	d8 01       	movw	r26, r16
 41e:	8c 91       	ld	r24, X
 420:	82 60       	ori	r24, 0x02	; 2
 422:	8c 93       	st	X, r24
			
			game_start = 2;
 424:	b0 92 03 01 	sts	0x0103, r11
 428:	1a c0       	rjmp	.+52     	; 0x45e <main+0x114>
		}
		else if ((game_start == 2)&&(game_buttonpressed==1)){
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	c1 f4       	brne	.+48     	; 0x45e <main+0x114>
 42e:	80 91 02 01 	lds	r24, 0x0102
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	a1 f4       	brne	.+40     	; 0x45e <main+0x114>
			cli();
 436:	f8 94       	cli
			game_lastscore = TCNT1/(MAX_COUNT/5000);
 438:	f6 01       	movw	r30, r12
 43a:	80 81       	ld	r24, Z
 43c:	91 81       	ldd	r25, Z+1	; 0x01
 43e:	90 93 01 01 	sts	0x0101, r25
 442:	80 93 00 01 	sts	0x0100, r24
			game_buttonpressed = 0; // clear button press to prevent conflict
 446:	10 92 02 01 	sts	0x0102, r1
			//disable interrupts that are set when game_start = 1
			TIMSK1 &= ~(1<<OCIE1A);
 44a:	d8 01       	movw	r26, r16
 44c:	8c 91       	ld	r24, X
 44e:	8d 7f       	andi	r24, 0xFD	; 253
 450:	8c 93       	st	X, r24
			PCMSK1 &= ~(1<<PCINT10);	
 452:	f1 01       	movw	r30, r2
 454:	80 81       	ld	r24, Z
 456:	8b 7f       	andi	r24, 0xFB	; 251
 458:	80 83       	st	Z, r24
			PORTB &= ~(1<<PINB5); // turn off LED when done
 45a:	2d 98       	cbi	0x05, 5	; 5
			sei();
 45c:	78 94       	sei
		}
		
		
		itoa(PINB, score, 16);		
 45e:	83 b1       	in	r24, 0x03	; 3
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	be 01       	movw	r22, r28
 464:	40 e1       	ldi	r20, 0x10	; 16
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	0e 94 8a 02 	call	0x514	; 0x514 <itoa>
		LCD_puts(score);	
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_puts>
		
    }
 472:	a2 cf       	rjmp	.-188    	; 0x3b8 <main+0x6e>

00000474 <__vector_3>:
}

// interrupt service routine for PB0-PB7, corresponding to PCINT8-PCINT15 interrupt enabler
ISR(PCINT1_vect)
{	
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
	
	unsigned char PORTBINFO = PINB;
 482:	83 b1       	in	r24, 0x03	; 3
	
	// if PB0 input is low (RESET is pressed)
	if ((PORTBINFO & (1<<PINB1))){
 484:	81 ff       	sbrs	r24, 1
 486:	04 c0       	rjmp	.+8      	; 0x490 <__vector_3+0x1c>
		game_start = 1;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	80 93 03 01 	sts	0x0103, r24
 48e:	0c c0       	rjmp	.+24     	; 0x4a8 <__vector_3+0x34>
		//LCD_puts("PINB0 LOW");
	}
	
	// if PB1 is low (user presses button after game started)
	else if ((PORTBINFO & (1<<PINB2))){
 490:	82 ff       	sbrs	r24, 2
 492:	0a c0       	rjmp	.+20     	; 0x4a8 <__vector_3+0x34>
		//LCD_puts("PINB1 LOW");
		// disable PINB1 button until game and timer have both started!
		if (game_start == 2)
 494:	80 91 03 01 	lds	r24, 0x0103
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	21 f4       	brne	.+8      	; 0x4a4 <__vector_3+0x30>
			game_buttonpressed = 1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 02 01 	sts	0x0102, r24
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__vector_3+0x34>
		else
			game_buttonpressed = 0;	
 4a4:	10 92 02 01 	sts	0x0102, r1
	}
}
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
	game_start = 2; // remain at state 2, indicating end of game, wait user to press RESET to make game_start = 0
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	80 93 03 01 	sts	0x0103, r24
	game_buttonpressed = 0;
 4ce:	10 92 02 01 	sts	0x0102, r1
	game_lastscore = 999;
 4d2:	87 ee       	ldi	r24, 0xE7	; 231
 4d4:	93 e0       	ldi	r25, 0x03	; 3
 4d6:	90 93 01 01 	sts	0x0101, r25
 4da:	80 93 00 01 	sts	0x0100, r24
	PORTB &= ~(1<<PINB5); // turn off light when it's done
 4de:	2d 98       	cbi	0x05, 5	; 5
	
	//disable interrupts that are set when game_start = 1
	TIMSK1 &= ~(1<<OCIE1A);
 4e0:	ef e6       	ldi	r30, 0x6F	; 111
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	8d 7f       	andi	r24, 0xFD	; 253
 4e8:	80 83       	st	Z, r24
	PCMSK1 &= ~(1<<PCINT10);
 4ea:	ec e6       	ldi	r30, 0x6C	; 108
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	8b 7f       	andi	r24, 0xFB	; 251
 4f2:	80 83       	st	Z, r24
		
 4f4:	ff 91       	pop	r31
 4f6:	ef 91       	pop	r30
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <strcpy_P>:
 506:	fb 01       	movw	r30, r22
 508:	dc 01       	movw	r26, r24
 50a:	05 90       	lpm	r0, Z+
 50c:	0d 92       	st	X+, r0
 50e:	00 20       	and	r0, r0
 510:	e1 f7       	brne	.-8      	; 0x50a <strcpy_P+0x4>
 512:	08 95       	ret

00000514 <itoa>:
 514:	fb 01       	movw	r30, r22
 516:	9f 01       	movw	r18, r30
 518:	e8 94       	clt
 51a:	42 30       	cpi	r20, 0x02	; 2
 51c:	c4 f0       	brlt	.+48     	; 0x54e <itoa+0x3a>
 51e:	45 32       	cpi	r20, 0x25	; 37
 520:	b4 f4       	brge	.+44     	; 0x54e <itoa+0x3a>
 522:	4a 30       	cpi	r20, 0x0A	; 10
 524:	29 f4       	brne	.+10     	; 0x530 <itoa+0x1c>
 526:	97 fb       	bst	r25, 7
 528:	1e f4       	brtc	.+6      	; 0x530 <itoa+0x1c>
 52a:	90 95       	com	r25
 52c:	81 95       	neg	r24
 52e:	9f 4f       	sbci	r25, 0xFF	; 255
 530:	64 2f       	mov	r22, r20
 532:	77 27       	eor	r23, r23
 534:	0e 94 bb 02 	call	0x576	; 0x576 <__udivmodhi4>
 538:	80 5d       	subi	r24, 0xD0	; 208
 53a:	8a 33       	cpi	r24, 0x3A	; 58
 53c:	0c f0       	brlt	.+2      	; 0x540 <itoa+0x2c>
 53e:	89 5d       	subi	r24, 0xD9	; 217
 540:	81 93       	st	Z+, r24
 542:	cb 01       	movw	r24, r22
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	a1 f7       	brne	.-24     	; 0x530 <itoa+0x1c>
 548:	16 f4       	brtc	.+4      	; 0x54e <itoa+0x3a>
 54a:	5d e2       	ldi	r21, 0x2D	; 45
 54c:	51 93       	st	Z+, r21
 54e:	10 82       	st	Z, r1
 550:	c9 01       	movw	r24, r18
 552:	0c 94 ab 02 	jmp	0x556	; 0x556 <strrev>

00000556 <strrev>:
 556:	dc 01       	movw	r26, r24
 558:	fc 01       	movw	r30, r24
 55a:	67 2f       	mov	r22, r23
 55c:	71 91       	ld	r23, Z+
 55e:	77 23       	and	r23, r23
 560:	e1 f7       	brne	.-8      	; 0x55a <strrev+0x4>
 562:	32 97       	sbiw	r30, 0x02	; 2
 564:	04 c0       	rjmp	.+8      	; 0x56e <strrev+0x18>
 566:	7c 91       	ld	r23, X
 568:	6d 93       	st	X+, r22
 56a:	70 83       	st	Z, r23
 56c:	62 91       	ld	r22, -Z
 56e:	ae 17       	cp	r26, r30
 570:	bf 07       	cpc	r27, r31
 572:	c8 f3       	brcs	.-14     	; 0x566 <strrev+0x10>
 574:	08 95       	ret

00000576 <__udivmodhi4>:
 576:	aa 1b       	sub	r26, r26
 578:	bb 1b       	sub	r27, r27
 57a:	51 e1       	ldi	r21, 0x11	; 17
 57c:	07 c0       	rjmp	.+14     	; 0x58c <__udivmodhi4_ep>

0000057e <__udivmodhi4_loop>:
 57e:	aa 1f       	adc	r26, r26
 580:	bb 1f       	adc	r27, r27
 582:	a6 17       	cp	r26, r22
 584:	b7 07       	cpc	r27, r23
 586:	10 f0       	brcs	.+4      	; 0x58c <__udivmodhi4_ep>
 588:	a6 1b       	sub	r26, r22
 58a:	b7 0b       	sbc	r27, r23

0000058c <__udivmodhi4_ep>:
 58c:	88 1f       	adc	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	5a 95       	dec	r21
 592:	a9 f7       	brne	.-22     	; 0x57e <__udivmodhi4_loop>
 594:	80 95       	com	r24
 596:	90 95       	com	r25
 598:	bc 01       	movw	r22, r24
 59a:	cd 01       	movw	r24, r26
 59c:	08 95       	ret

0000059e <_exit>:
 59e:	f8 94       	cli

000005a0 <__stop_program>:
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <__stop_program>
